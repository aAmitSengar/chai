{"version":3,"sources":["logo.svg","Conditional.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Conditional","_this$props","this","props","restOfProps","children","condition","Object","objectWithoutProperties","react_default","a","createElement","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","installPrompt","styles","color","installApp","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","prompt","userChoice","sent","outcome","console","log","setState","installButton","stop","state","renderCondition","_this2","window","addEventListener","e","preventDefault","matchMedia","matches","navigator","standalone","className","src","logo","alt","Conditional_Conditional","style","onClick","withRouter","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","process","URL","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.24334414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nexport default class Conditional extends Component {\n    render() {\n        const { children, condition, ...restOfProps } = this.props;\n        if (!this.props.condition) return null;\n        return (\n            <div {...restOfProps}>\n                {this.props.children}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport Conditional from './Conditional';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinstallButton: false,\n\t\t\trenderCondition: true\n\t\t};\n\t\t// this.handleSubmitMessage = this.handleSubmitMessage.bind(this);\n\t}\n\t// fetch('/data.json', {\n\t//   mode: 'no-cors' // 'cors' by default\n\t// })\n\t// .then(function(response) {\n\t//   // Do something with response\n\t// });\n\tinstallPrompt = null;\n\tstyles = { color: '#F00' };\n\tcomponentDidMount() {\n\t\tconsole.log('Listening for Install prompt');\n\t\twindow.addEventListener('beforeinstallprompt', (e) => {\n\t\t\t// For older browsers\n\t\t\te.preventDefault();\n\t\t\tconsole.log('Install Prompt fired');\n\t\t\tthis.installPrompt = e;\n\t\t\t// See if the app is already installed, in that case, do nothing\n\t\t\tif (\n\t\t\t\t(window.matchMedia && window.matchMedia('(display-mode: standalone)').matches) ||\n\t\t\t\twindow.navigator.standalone === true\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Set the state variable to make button visible\n\t\t\tthis.setState({\n\t\t\t\tinstallButton: true\n\t\t\t});\n\t\t});\n\t}\n\tinstallApp = async () => {\n\t\tif (!this.installPrompt) return false;\n\t\tthis.installPrompt.prompt();\n\t\tlet outcome = await this.installPrompt.userChoice;\n\t\tif (outcome.outcome === 'accepted') {\n\t\t\tconsole.log('App Installed');\n\t\t} else {\n\t\t\tconsole.log('App not installed');\n\t\t}\n\t\t// Remove the event reference\n\t\tthis.installPrompt = null;\n\t\t// Hide the button\n\t\tthis.setState({\n\t\t\tinstallButton: false\n\t\t});\n\t};\n \n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<p>\n\t\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\n\t\t\t\t\t</p>\n\t\t\t\t\t<Conditional\n\t\t\t\t\t\tstyle={{ color: '#F00' }}\n\t\t\t\t\t\tcondition={this.state.installButton}\n\t\t\t\t\t\tonClick={this.installApp}\n\t\t\t\t\t>\n\t\t\t\t\t\tInstall As Application\n\t\t\t\t\t</Conditional>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n// var deferredPrompt;\nexport function register(config) {\n  console.log(process.env.NODE_ENV, \"process.env.NODE_ENV\")\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      console.log(\"will not work\")\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    console.log(\"It will work\")\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n\n\n\n// window.addEventListener('beforeinstallprompt', function (e) {\n//   // Prevent Chrome 67 and earlier from automatically showing the prompt\n//   e.preventDefault();\n//   // Stash the event so it can be triggered later.\n//   deferredPrompt = e;\n\n//   showAddToHomeScreen();\n\n// });\n\n// function showAddToHomeScreen() {\n\n//   var a2hsBtn = document.querySelector(\".ad2hs-prompt\");\n\n//   a2hsBtn.style.display = \"block\";\n\n//   a2hsBtn.addEventListener(\"click\", addToHomeScreen);\n\n// }\n\n// function addToHomeScreen() {\n//   var a2hsBtn = document.querySelector(\".ad2hs-prompt\"); // hide our user interface that shows our A2HS button\n//   a2hsBtn.style.display = 'none'; // Show the prompt\n//   deferredPrompt.prompt(); // Wait for the user to respond to the prompt\n//   deferredPrompt.userChoice\n//     .then(function (choiceResult) {\n\n//       if (choiceResult.outcome === 'accepted') {\n//         console.log('User accepted the A2HS prompt');\n//       } else {\n//         console.log('User dismissed the A2HS prompt');\n//       }\n\n//       deferredPrompt = null;\n\n//     });\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}