{"version":3,"sources":["logo.svg","Conditional.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Conditional","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isIos","userAgent","window","navigator","toLowerCase","test","isInStandaloneMode","standalone","state","showBanner","deferredPrompt","addToHomeScreen","bind","assertThisInitialized","showAddToHomeScreen","addEventListener","e","preventDefault","setState","showIosInstall","document","querySelector","style","display","prompt","userChoice","then","choiceResult","outcome","console","log","a2hsBtn","iosPrompt","react_default","a","createElement","type","className","onClick","src","alt","width","height","Component","App","listenForInstallBanner","bDetails","browserDetails","isMobile","isAndroid","isChrome","_this2","choice","closeDialog","_this$state","logo","Conditional_Conditional","withRouter","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","react_router_dom","src_App_0","getElementById","process","URL","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2936fe99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n// import { close } from '@material-ui/core/Icon/Icon';\nexport default class Conditional extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshowBanner: true,\n\t\t\tdeferredPrompt: null\n\t\t};\n\t\tthis.addToHomeScreen = this.addToHomeScreen.bind(this);\n\t\tthis.showAddToHomeScreen = this.showAddToHomeScreen.bind(this);\n\t}\n\n\t// Detects if device is on iOS\n\tisIos = () => {\n\t\tconst userAgent = window.navigator.userAgent.toLowerCase();\n\t\treturn /iphone|ipad|ipod/.test(userAgent);\n\t};\n\t// Detects if device is in standalone mode\n\tisInStandaloneMode = () => 'standalone' in window.navigator && window.navigator.standalone;\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\n\t\t\t'beforeinstallprompt',\n\t\t\tfunction(e) {\n\t\t\t\t// Prevent Chrome 67 and earlier from automatically showing the prompt\n\t\t\t\te.preventDefault();\n\t\t\t\t// Stash the event so it can be triggered later.\n\t\t\t\tthis.setState({ deferredPrompt: e });\n\t\t\t\tthis.showAddToHomeScreen();\n\t\t\t}.bind(this)\n\t\t);\n\t\t// Checks if should display install popup notification:\n\t\tif (this.isIos() && !this.isInStandaloneMode()) {\n\t\t\t// this.setState({ showInstallMessage: true });\n\t\t\tthis.showIosInstall();\n\t\t}\n\t}\n\n\taddToHomeScreen() {\n\t\tlet a2hsBtn = document.querySelector('.ad2hs-prompt'); // hide our user interface that shows our A2HS button\n\t\ta2hsBtn.style.display = 'none'; // Show the prompt\n\t\tthis.state.deferredPrompt.prompt(); // Wait for the user to respond to the prompt\n\t\tthis.state.deferredPrompt.userChoice.then(function(choiceResult) {\n\t\t\tif (choiceResult.outcome === 'accepted') {\n\t\t\t\tconsole.log('User accepted the A2HS prompt');\n\t\t\t} else {\n\t\t\t\tconsole.log('User dismissed the A2HS prompt');\n\t\t\t}\n\t\t\tthis.setState({ deferredPrompt: null });\n\t\t});\n\t}\n\tshowAddToHomeScreen() {\n\t\tlet a2hsBtn = document.querySelector('.ad2hs-prompt');\n\t\ta2hsBtn.style.display = 'block';\n\t\ta2hsBtn.addEventListener('click', this.addToHomeScreen);\n\t}\n\n\tshowIosInstall() {\n\t\tlet iosPrompt = document.querySelector('.ios-prompt');\n\t\tiosPrompt.style.display = 'block';\n\t\tiosPrompt.addEventListener('click', () => {\n\t\t\tiosPrompt.style.display = 'none';\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button type=\"button\" className=\"ad2hs-prompt\" onClick={this.addToHomeScreen}>\n\t\t\t\t\tInstall Web App\n                </button>\n                \n\t\t\t\t<div className=\"ios-prompt\">\n\t\t\t\t \n\t\t\t\t\t<img src=\"/public/logo1.png\" alt=\"add me\" />\n\t\t\t\t\t<p>\n\t\t\t\t\t\tTo install this Web App in your iPhone/iPad press\n\t\t\t\t\t\t<img src=\"logo1.png\" alt=\"add\"  width=\"25px\" height=\"25px\" onClick={this.addToHomeScreen} /> and then Add to Home Screen.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport Conditional from './Conditional';\nimport * as browserDetails from 'browser-details';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshowBanner: true,\n\t\t\tdeferredPrompt: null\n\t\t};\n\t}\n\tgetInitialState() {\n\t\tconst { userAgent } = this.props;\n\t\tconst bDetails = new browserDetails(userAgent);\n\t\tconsole.log(bDetails);\n\n\t\treturn {\n\t\t\tdeferredPrompt: null,\n\t\t\tshowBanner: bDetails.isMobile() && bDetails.isAndroid() && !bDetails.isChrome(),\n\t\t\tisChrome: bDetails.isChrome()\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\t// const { isChrome } = this.state;\n\t\t// if (isChrome) {\n\t\tthis.listenForInstallBanner();\n\t\t// }\n\t}\n\n\tonClickInstallApp() {\n\t\tconst { deferredPrompt } = this.state;\n\t\tdeferredPrompt.prompt();\n\t\tdeferredPrompt.userChoice.then((choice) => {\n\t\t\tif (choice.outcome === 'accepted') {\n\t\t\t\tthis.closeDialog();\n\t\t\t}\n\t\t});\n\t}\n\n\tlistenForInstallBanner = () => {\n\t\twindow.addEventListener('beforeinstallprompt', (e) => {\n\t\t\te.preventDefault();\n\t\t\tthis.setState({\n\t\t\t\tdeferredPrompt: e,\n\t\t\t\tshowBanner: true\n\t\t\t});\n\t\t});\n\t};\n\n\tcloseDialog() {\n\t\tthis.setState({ showBanner: false, deferredPrompt: null });\n\t}\n\n\trender() {\n\t\tconst { showBanner, isChrome } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<p>welcome</p>\n\t\t\t\t\t<Conditional\n\t\t\t\t\t\t// style={{ color: '#F00' }}\n\t\t\t\t\t\t// condition={this.state.installButton}\n\t\t\t\t\t\t// onClick={this.installApp}\n\t\t\t\t\t\t// showBanner={showBanner}\n\t\t\t\t\t\t// isChrome={isChrome}\n\t\t\t\t\t>\n\t\t\t\t\t\tInstall As Application\n\t\t\t\t\t</Conditional>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n// var deferredPrompt;\nexport function register(config) {\n  console.log(process.env.NODE_ENV, \"process.env.NODE_ENV\")\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      console.log(\"will not work\")\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    console.log(\"It will work\")\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n\n\n\n// window.addEventListener('beforeinstallprompt', function (e) {\n//   // Prevent Chrome 67 and earlier from automatically showing the prompt\n//   e.preventDefault();\n//   // Stash the event so it can be triggered later.\n//   deferredPrompt = e;\n\n//   showAddToHomeScreen();\n\n// });\n\n// function showAddToHomeScreen() {\n\n//   var a2hsBtn = document.querySelector(\".ad2hs-prompt\");\n\n//   a2hsBtn.style.display = \"block\";\n\n//   a2hsBtn.addEventListener(\"click\", addToHomeScreen);\n\n// }\n\n// function addToHomeScreen() {\n//   var a2hsBtn = document.querySelector(\".ad2hs-prompt\"); // hide our user interface that shows our A2HS button\n//   a2hsBtn.style.display = 'none'; // Show the prompt\n//   deferredPrompt.prompt(); // Wait for the user to respond to the prompt\n//   deferredPrompt.userChoice\n//     .then(function (choiceResult) {\n\n//       if (choiceResult.outcome === 'accepted') {\n//         console.log('User accepted the A2HS prompt');\n//       } else {\n//         console.log('User dismissed the A2HS prompt');\n//       }\n\n//       deferredPrompt = null;\n\n//     });\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}